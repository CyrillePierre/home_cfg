scriptencoding utf-8

""""""""""""""" Config Vundle """"""""""""""""""""""""

filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
Plugin 'preservim/nerdtree'
Plugin 'vim-airline/vim-airline'
Plugin 'Valloric/YouCompleteMe'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'tpope/vim-fugitive'
"Plugin 'lervag/vimtex'
Plugin 'celforyon/vimmake'
Plugin 'tikhomirov/vim-glsl'
Plugin 'dpelle/vim-Grammalecte'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'rust-lang/rust.vim'
Plugin 'tomtom/tcomment_vim'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
 

""""""""""""""" Plugins config """""""""""""""""""""""""""

let g:ycm_confirm_extra_conf    = 0
let g:ycm_global_ycm_extra_conf = '~/.vim/ycm_extra_conf.py'
let g:ycm_extra_conf_vim_data   = ['&filetype']
let g:ycm_use_clangd            = 1
let g:ycm_filetype_blacklist    = {'tex': 1}
let g:ycm_auto_hover = ''

let g:airline_powerline_fonts              = 1
let g:airline#extensions#tabline#enabled   = 1
let g:airline_theme                        = 'jellybeans'
let g:airline#extensions#tabline#formatter = 'unique_tail'

let g:grammalecte_cli_py='~/share/grammalecte/grammalecte-cli.py'

let g:tex_flavor = "latex"

let g:multi_cursor_use_default_mapping = 0
let g:multi_cursor_start_word_key      = '<C-n>'
let g:multi_cursor_select_all_word_key = '<A-n>'
let g:multi_cursor_start_key           = 'g<C-n>'
let g:multi_cursor_select_all_key      = 'g<A-n>'
let g:multi_cursor_next_key            = '<C-n>'
let g:multi_cursor_prev_key            = '<C-p>'
let g:multi_cursor_skip_key            = '<C-s>'
let g:multi_cursor_quit_key            = '<Esc>'

" bug with NERDtree: undefined variables
let g:NERDTreeGlyphReadOnly = 'RO'
let g:NERDTreeNodeDelimiter = "\u00b7"
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'


""""""""""""""" Variables """"""""""""""""""""""""

set nocompatible              " be iMproved, required
set background=dark
set number						" affichage des numéros de lignes
set mouse=v
set nocursorline					" met en valeur la ligne possedant le curseur
set guioptions=m
set guifont=Inconsolata\ 12
set so=10						" 10 lignes autour du curseur
set path=**,/usr/include,/usr/local/include
set winminwidth=20
set winwidth=110
set noexpandtab					" transforme les tabulations en espaces
set ts=4						" largeur d'une tabulation
set sts=4						" largeur des tabulations en mode insertion
set sw=4						" un truc dans le même genre
set backspace=indent,eol,start	" Le backspace
set backupdir=$HOME/.vim/backup
set directory=$HOME/.vim/swapfiles
set undofile
set undodir=$HOME/.vim/undodir
set backup						" Activer la sauvegarde
set history=100					" un historique raisonnable
set undolevels=150				" undo, pour revenir en arrière
set suffixes=.jpg,.png,.jpeg,.gif,.bak,~,.swp,.swo,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc,.pyc,.pyo
set autoread					" Relecture auto des fichiers modifiés en dehors de vim
set errorbells					" Aucun son ou affichage lors des erreurs
set novisualbell
set t_vb=
set showmatch					" Affichage des paires de parenthèses
set matchtime=2
set laststatus=2				" Afficher la barre d'état
set incsearch
set noignorecase
set infercase
set hlsearch					" La recherche s'arrête à la fin du fichier
set writeany					" Ne pas nous afficher un message quand on enregistre un readonly
set showcmd						" Afficher les commandes incomplètes
set ruler						" Afficher la position du curseur
set nowrap
set foldmethod=syntax
set wildmenu
set wildignore=*.o,*#,*~,*.dll,*.so,*.a
set wildmode=full
"set statusline=%F%m\ %r\ Line:%l\/%L,%c\ %p%%
set ttyfast						" TTY rapide, améliore l'affichage
set lazyredraw					" Ne pas mettre à jour l'écran pendant un script
set nocp
set t_Co=256					" terminal avec les couleurs 256
set hidden						" l'historique des actions est conservé même en changeant de buffer
set cindent
set cinoptions+=:0              " switch without indent for cases
set cinoptions+=(0,Ws,m1        " indent for '('
set cinoptions+=N-s             " namespace (no indent)
set cinoptions+=E-s             " extern C (no indent)
set cinoptions+=g0              " no indent for public
set cinoptions+=hs              " indent after public
set completeopt=menuone,menu,longest,preview
let &colorcolumn=join(range(100,300),",") " grise les lignes après la 95e colonne
set foldlevel=1
set foldminlines=3

"set ts=2
"set sw=2
"set expandtab					" transforme les tabulations en espaces


colorscheme ese
"colorscheme perso
syntax on

"""""""" Raccourcis clavier """"""""""""""""""""""""

function! s:isNTOpen()        
	return exists("t:NERDTreeBufName") && (bufwinnr(t:NERDTreeBufName) != -1)
endfunction

function! s:NTToggle()
	NERDTreeToggle
	if s:isNTOpen()
"		exec <C-W> 35\|
		set winfixwidth
	endif
endfunction

map <C-left> <C-W>h:AirlineRefresh<cr>
imap <C-left> <Esc><C-W>h:AirlineRefresh<cr>
map <C-right> <C-W>l:AirlineRefresh<cr>
imap <C-right> <Esc><C-W>l:AirlineRefresh<cr>
map <S-C-left> :bN<CR>
imap <S-C-left> <Esc>:bN<CR>
map <S-C-right> :bn<CR>
map <S-C-right> <Esc>:bn<CR>
map <F2> :let @/=""<cr>
map <F3> :call <SID>NTToggle()<CR>
map <F4> :YcmCompleter GoTo<CR>
map <F5> :YcmCompleter GetType<CR>
map <F6> :TlistToggle<CR>
map <C-B> :Make<CR>
map <s-up> 15<c-y>
map <s-down> 15<c-e>
nmap <F7> <plug>(YCMHover)

" mettre en commentaire

command Bd bp|bd#
map <C-D> :Bd<CR>


"au Filetype html,xml,xsl,php source ~/.vim/plugin/closetag.vim


" Autocmd 
"
autocmd FocusGained * checktime

augroup filetypedetect
	au BufRead,BufNewFile *.launch setfiletype xml
	au BufRead,BufNewFile *.urdf setfiletype xml
	au BufRead,BufNewFile *.shader setfiletype glsl
	au BufRead,BufNewFile *.tex setlocal ts=2 sts=2 sw=2 tw=100
	au BufRead,BufNewFile *.tex setfiletype tex
	au FileType python setlocal ts=4 sts=4 expandtab
	au FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
	au FileType ruby setlocal ts=2 sts=2 sw=2
augroup END

" prérequis tags
filetype plugin on

" automatically open and close the popup menu / preview window
au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif

" include existing local_cfg.vim
runtime local_cfg.vim
