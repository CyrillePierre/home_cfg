scriptencoding utf-8

let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
let plug_path = data_dir.'/autoload/plug.vim'
if empty(glob(plug_path))
  let url = 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  silent execute '!curl -fLo '.plug_path.' --create-dirs '.url
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin()
  Plug 'scrooloose/nerdtree', { 'on': ['NERDTreeToggle', 'NERDTreeVCS', 'NERDTreeFind'] } |
    \ Plug 'Xuyuanp/nerdtree-git-plugin'
  Plug 'vim-airline/vim-airline'
  " Plug 'Valloric/YouCompleteMe', { 'do': './install.py --clangd-completer -rust-completer' }
  Plug 'vim-airline/vim-airline-themes'
  Plug 'tpope/vim-fugitive', { 'on': 'Git' }
  Plug 'tpope/vim-obsession'
  "Plug 'lervag/vimtex'
  Plug 'celforyon/vimmake'
  Plug 'celforyon/vimas'
  Plug 'tikhomirov/vim-glsl', { 'for': 'glsl' }
  Plug 'dpelle/vim-Grammalecte'
  Plug 'terryma/vim-multiple-cursors'
  Plug 'rust-lang/rust.vim', { 'for': 'rust' }
  Plug 'tomtom/tcomment_vim'
  Plug 'cespare/vim-toml', { 'for': 'toml' }
  Plug 'DingDean/wgsl.vim', { 'for': 'wgsl' }
  Plug 'dhruvasagar/vim-table-mode'
  Plug 'niklasl/vim-rdf'
  Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
  Plug 'junegunn/fzf.vim'

  Plug 'prabirshrestha/vim-lsp'
  Plug 'mattn/vim-lsp-settings'
  Plug 'prabirshrestha/asyncomplete.vim'
  Plug 'prabirshrestha/asyncomplete-lsp.vim'

  if has('nvim')
    Plug 'sbdchd/neoformat', { 'on': 'Neoformat' }
    Plug 'sakhnik/nvim-gdb', { 'do': ':!./install.sh' }
  endif
call plug#end()


""""""""""""""" Plugins config """""""""""""""""""""""""""

let g:ycm_confirm_extra_conf    = 0
let g:ycm_global_ycm_extra_conf = '~/.vim/ycm_extra_conf.py'
let g:ycm_extra_conf_vim_data   = ['&filetype']
let g:ycm_use_clangd            = 1
let g:ycm_filetype_blacklist    = {'tex': 1}
let g:ycm_auto_hover = ''

let g:airline_powerline_fonts              = 1
let g:airline#extensions#tabline#enabled   = 1
let g:airline_theme                        = 'ese'
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline#extensions#tabline#ignore_bufadd_pat = '!|defx|gundo|nerd_tree|startify|tagbar|undotree|vimfiler'

let g:grammalecte_cli_py='~/share/grammalecte/grammalecte-cli.py'

let g:tex_flavor = "latex"

let g:multi_cursor_use_default_mapping = 0
let g:multi_cursor_start_word_key      = '<C-n>'
let g:multi_cursor_select_all_word_key = '<A-n>'
let g:multi_cursor_start_key           = 'g<C-n>'
let g:multi_cursor_select_all_key      = 'g<A-n>'
let g:multi_cursor_next_key            = '<C-n>'
let g:multi_cursor_prev_key            = '<C-p>'
let g:multi_cursor_skip_key            = '<C-s>'
let g:multi_cursor_quit_key            = '<Esc>'

let g:fzf_command_prefix = 'Fzf'

if has('nvim')
  let g:vimas_sessions_dir = fnamemodify('~', ':p').'.local/share/nvim/sessions/'
endif

" bug with NERDtree: undefined variables
" let g:NERDTreeGlyphReadOnly = 'RO'
" let g:NERDTreeNodeDelimiter = "\u00b7"
" let g:NERDTreeDirArrowExpandable = '▸'
" let g:NERDTreeDirArrowCollapsible = '▾'

function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> gd         <plug>(lsp-definition)
    nmap <buffer> gs         <plug>(lsp-document-symbol-search)
    nmap <buffer> gS         <plug>(lsp-workspace-symbol-search)
    nmap <buffer> gr         <plug>(lsp-references)
    nmap <buffer> gi         <plug>(lsp-implementation)
    nmap <buffer> gt         <plug>(lsp-type-definition)
    nmap <buffer> <leader>rn <plug>(lsp-rename)
    nmap <buffer> [g         <plug>(lsp-previous-diagnostic)
    nmap <buffer> ]g         <plug>(lsp-next-diagnostic)
    nmap <buffer> K          <plug>(lsp-hover)
    nmap <buffer> <leader>ld <plug>(lsp-document-diagnostics)

    let g:lsp_format_sync_timeout = 1000
    autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')

    " refer to doc to add more commands
endfunction

augroup lsp_install
    au!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

if executable('/usr/bin/clangd')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'clangd',
        \ 'cmd': {server_info -> ['/usr/bin/clangd', '-background-index', '--header-insertion=never']},
        \ 'whitelist': ['c', 'cpp', 'objc', 'objcpp'],
        \ })
endif

" config asynccomplete
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : "\<cr>"
imap <c-space> <Plug>(asyncomplete_force_refresh)

" config nvim-gdb
let g:nvimgdb_disable_start_keymaps = 1




""""""""""""""" Variables """"""""""""""""""""""""

set nocompatible              " be iMproved, required
set background=dark
set number            " affichage des numéros de lignes
set mouse=v
set nocursorline          " met en valeur la ligne possedant le curseur
set guioptions=m
set guifont=Inconsolata\ 12
set so=10           " 10 lignes autour du curseur
set path=**,/usr/include,/usr/local/include
set winminwidth=20
set winwidth=110
set noexpandtab         " transforme les tabulations en espaces
set ts=4            " largeur d'une tabulation
set sts=4           " largeur des tabulations en mode insertion
set sw=4            " un truc dans le même genre
set backspace=indent,eol,start  " Le backspace
set backupdir=$HOME/.vim/backup
set directory=$HOME/.vim/swapfiles
set undofile
set undodir=$HOME/.vim/undodir
set backup            " Activer la sauvegarde
set history=100         " un historique raisonnable
set undolevels=150        " undo, pour revenir en arrière
set suffixes=.jpg,.png,.jpeg,.gif,.bak,~,.swp,.swo,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc,.pyc,.pyo
set autoread          " Relecture auto des fichiers modifiés en dehors de vim
set errorbells          " Aucun son ou affichage lors des erreurs
set novisualbell
set t_vb=
set showmatch         " Affichage des paires de parenthèses
set matchtime=2
set laststatus=2        " Afficher la barre d'état
set incsearch
set noignorecase
set infercase
set hlsearch          " La recherche s'arrête à la fin du fichier
set writeany          " Ne pas nous afficher un message quand on enregistre un readonly
set showcmd           " Afficher les commandes incomplètes
set ruler           " Afficher la position du curseur
set nowrap
set foldmethod=syntax
set wildmenu
set wildignore=*.o,*#,*~,*.dll,*.so,*.a
set wildmode=full
"set statusline=%F%m\ %r\ Line:%l\/%L,%c\ %p%%
set ttyfast           " TTY rapide, améliore l'affichage
set lazyredraw          " Ne pas mettre à jour l'écran pendant un script
set nocp
set t_Co=256          " terminal avec les couleurs 256
set hidden            " l'historique des actions est conservé même en changeant de buffer
set cindent
set cinoptions+=:0              " switch without indent for cases
set cinoptions+=(s              " only 1 indent for '(' (default: 2 indents)
set cinoptions+=Ws              " if '(0', don't indent if the line ends with '('
set cinoptions+=m1              " unindent when ')' starts the line
set cinoptions+=N-s             " namespace (no indent)
set cinoptions+=E-s             " extern C (no indent)
set cinoptions+=g0              " no indent for public
set cinoptions+=hs              " indent after public
set completeopt=menuone,menu,longest,preview
let &colorcolumn = join(range(101,300),",") " grise les lignes après la 100e colonne
set foldlevel=1
set foldminlines=3

let g:python_indent = {}
let g:python_indent.open_paren   = 'shiftwidth()'
let g:python_indent.nested_paren = 'shiftwidth()'
let g:python_indent.continue     = 'shiftwidth()'
let g:python_indent.closed_paren_align_last_line = v:false

"set ts=2
"set sw=2
"set expandtab          " transforme les tabulations en espaces


" colorscheme ese
colorscheme ese2
syntax on


function! s:isNTOpen()
  return exists("t:NERDTreeBufName") && (bufwinnr(t:NERDTreeBufName) != -1)
endfunction

function! s:NTToggle()
  NERDTreeToggle
  if s:isNTOpen()
"   exec <C-W> 35\|
    set winfixwidth
  endif
endfunction

function! AutoNerdTree()
  NERDTreeVCS
  wincmd l
  NERDTreeFind
  wincmd l
endfunction

function! SetupVimAS()
    if exists('g:loaded_vimas') && vimas#vimas() && len(filter(getbufinfo({'buflisted':1}), 'v:val.name != ""')) != 0
        call AutoNerdTree()
    endif
endfunction

"""""""" Commandes """""""""""""""""""""""""""""""""

command! Bd bp|bd!#


"""""""" Raccourcis clavier """"""""""""""""""""""""

let mapleader = ","
 noremap <silent> <C-left>       <C-W>h:AirlineRefresh<CR>
inoremap <silent> <C-left>  <Esc><C-W>h:AirlineRefresh<CR>
 noremap <silent> <C-right>      <C-W>l:AirlineRefresh<CR>
inoremap <silent> <C-right> <Esc><C-W>l:AirlineRefresh<CR>
 noremap <silent> <C-down>       <C-W>j:AirlineRefresh<CR>
inoremap <silent> <C-down>  <Esc><C-W>j:AirlineRefresh<CR>
 noremap <silent> <C-up>         <C-W>k:AirlineRefresh<CR>
inoremap <silent> <C-up>    <Esc><C-W>k:AirlineRefresh<CR>

 noremap <S-C-left>       :bN<CR>
inoremap <S-C-left>  <Esc>:bN<CR>
 noremap <S-C-right>      :bn<CR>
 noremap <S-C-right> <Esc>:bn<CR>
 noremap <F2>             :noh<cr>
 noremap <F3>             :call <SID>NTToggle()<CR>
 noremap <F6>             :TlistToggle<CR>
 noremap <C-B>            :Make<CR>
 noremap <C-D>            :Bd<CR>
 noremap <s-up>           15<c-y>
 noremap <s-down>         15<c-e>
 noremap <leader>h        :noh<cr>
 noremap <leader>nf       :NERDTreeFind<cr>
 noremap <leader>ld       :LspDocumentDiagnostics<cr>

 noremap <leader>ff       :FzfFiles<cr>
 noremap <leader>fg       :FzfRg<space>
 noremap <leader>fb       :FzfBuffers<cr>



"au Filetype html,xml,xsl,php source ~/.vim/plugin/closetag.vim


" Autocmd
"
autocmd FocusGained * checktime

augroup filetypedetect
  au BufRead,BufNewFile *.launch setfiletype xml
  au BufRead,BufNewFile *.urdf setfiletype xml
  au BufRead,BufNewFile *.shader setfiletype glsl
  au BufRead,BufNewFile *.tex setlocal ts=2 sts=2 sw=2 tw=100
  au BufRead,BufNewFile *.tex setfiletype tex
  au FileType python setlocal ts=4 sts=4 expandtab
  au FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
  au FileType ruby setlocal ts=2 sts=2 sw=2
augroup END

autocmd VimEnter * call timer_start(0, { tid -> SetupVimAS() })

" prérequis tags
filetype plugin on

" automatically open and close the popup menu / preview window
au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif

" include existing local_cfg.vim
runtime local_cfg.vim
